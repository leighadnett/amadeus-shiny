ifelse(ff$AssetClass=="FXHedge" & ff$TargetWeightOrig<0,ff$ret,ff$ret))
ff$ret[1]<-0
ff<-ff[!is.na(ff$AssetClass) & !is.na(ff$ret),]
ff<-ff%>%group_by(id)%>%mutate(value=cumprod(1+ret))
setDT(ff)
setDT(tdates)
setkey(ff, Dates)
setkey(tdates, Dates)
ff<-merge(ff,tdates,by="Dates",all.x=T)
ff<-as.data.table(ff)
ff<-ff[order(id,Dates),]
#Add Launch Dates
ff$adjdates<-ifelse(ff$id!=lagpad(ff$id,k=1),ff$Dates,ff$adjdates)
ff$adjdates[1]<-ff$Dates[1]
ff$adjdates<-as.Date(ff$adjdates)
#Leverage (coming from FX Hedges)
ff<-ff%>%group_by(Dates)%>%mutate(totalloc=sum(abs(TargetWeight)))
ff$leverage<-ff$totalloc-1
#Deduct Management Fees
mgmt_fee<-as.numeric(gui$settings_gui$Setting[gui$settings_gui$Category=="ManagementFees"])
mgmt_fee<-mgmt_fee/252
ff$mgmt_fee<-mgmt_fee
ff$ret[ff$id=="CASHHC"] <- (-(ff$mgmt_fee*ff$totalloc)/ff$TargetWeight[ff$id=="CASHHC"])
ff$value[ff$id=="CASHHC"]  <- cumprod(1+ff$ret[ff$id=="CASHHC"])
#Launch and Rebalance
ff$ind_groups<-ifelse(!is.na(as.numeric(ff$adjdates)),1,0)
ff$ind_groups<-cumsum(ff$ind_groups)
ff<-ff%>%group_by(ind_groups)%>%mutate(period_perf=cumprod(1+ret))
ff$attribution<-ff$TargetWeight*ff$period_perf
#Aggregate Portfolio
ff<-ff%>%group_by(Dates)%>%mutate(sumperf=sum(attribution))
#Deduct Trading Fees
trading_fee<-as.numeric(gui$settings_gui$Setting[gui$settings_gui$Category=="TradingFees"])
#Calculate Drifting Weights
ff<-ff%>%group_by(Dates)%>%mutate(drifting_weights=attribution/(sum(attribution)-leverage))
#Derive Trading Fees
ff$trades<-abs(ifelse(!is.na(ff$adjdates) & ff$AssetClass %ni% c("Cash","FXHedge"),(ff$TargetWeight)-ff$drifting_weights,NA))
ff<-ff%>%group_by(Dates)%>%mutate(tot_trades=sum(trades,na.rm=T))
ff$trading_cost<-ff$tot_trades*trading_fee
ff$trading_cost<-ifelse(ff$id!=lagpad(ff$id) & ff$AssetClass %ni% c("Cash","FXHedge"),trading_fee*ff$TargetWeight,ff$trading_cost)
ff$trading_cost[1]<-ifelse(ff$AssetClass %ni% c("Cash","FXHedge"),trading_fee*abs(ff$TargetWeight),0)
#Derive Trading Fees Hedge
ff<-ff %>% group_by(id) %>% mutate(n = row_number())
ff$trading_cost_hedge<-ifelse(ff$AssetClass=='FXHedge' & ff$id != lagpad(ff$id,k=1),trading_fee,0)
ff$trading_cost_hedge<-ifelse(ff$AssetClass=='FXHedge' & (ff$n %% 252==0),trading_fee,ff$trading_cost_hedge)
ff$trading_cost_hedge<-ff$trading_cost_hedge*ff$TargetWeight
#Calculate Performance including trading cost
ff$sumperf<-ifelse(!is.na(ff$trading_cost),ff$sumperf,ff$sumperf-ff$trading_cost-ff$trading_cost_hedge)
ff$levered_perf<-ff$sumperf-ff$leverage
#Calculate Portfolio NAV
ff$pf_ret<-ifelse(is.na(ff$adjdates),(ff$levered_perf)/lagpad(ff$levered_perf,k=1)-1,ff$levered_perf-1)
#Deducted Exceptional Trading Fees at Portfolio Launch
ff$pf_ret<-ifelse(ff$id!=lagpad(ff$id,k=1),ff$pf_ret-trading_fee,ff$pf_ret)
ff$pf_ret[1]<-0
#Calculate NAV
ff<-ff%>%group_by(id)%>%mutate(pf_idx=cumprod(1+pf_ret))
ff<-ff%>%group_by(Dates)%>%mutate(tot_trading_cost=sum(trading_cost),tot_trading_cost_fx=sum(trading_cost_hedge))
pf<-ff[ff$id=="CASHHC",]
#Subportfolios
#--------------------------------------------------------------------------------------------------------------------------------
#Equities
get_subportfolio_performance<-function(ff,settings_gui,sel_asset_class='Equities')
{
#sel_asset_class<-"Short-term"
eq<-ff[ff$AssetClass == sel_asset_class,]
if(nrow(eq)==0)
{
eq1<-as.data.frame(t(c(NA,NA,NA,NA,NA)),stringsAsFactors=F)
names(eq1)<-c("AssetClass","Dates","pf_idx","sum_drifting_weights","portfolio")
eq1<-head(eq1,0)
}else{
eq<-as.data.table(eq)
eq<-eq%>%group_by(Dates)%>%mutate(sumperf=sum(attribution))
eq<-eq%>%group_by(Dates)%>%mutate(totalloc=sum(abs(TargetWeight)))
eq$levered_perf<-eq$sumperf/eq$totalloc
eq$pf_ret<-ifelse(is.na(eq$adjdates),(eq$levered_perf)/lagpad(eq$levered_perf,k=1)-1,eq$levered_perf-1)
eq$pf_ret<-ifelse(eq$id!=lagpad(eq$id,k=1),eq$pf_ret-trading_fee,eq$pf_ret)
eq$pf_ret<-ifelse(eq$id!=lagpad(eq$id,k=1),0,eq$pf_ret)
eq$pf_ret[1]<-0
eq<-eq%>%group_by(Dates)%>%mutate(sum_drifting_weights=sum(drifting_weights))
eq1<-eq%>%group_by(id)%>%mutate(pf_idx=cumprod(1+pf_ret))
eq1<-eq1[eq1$id==eq1$id[1],]
eq1<-eq1[,c("AssetClass","Dates","pf_idx","sum_drifting_weights")]
eq1$portfolio<-gui$settings_gui[gui$settings_gui$Category=="Portfolio",]$Setting
return(eq1)
plot_ly(eq1,x=~as.Date(Dates),y=~pf_idx,type="scatter",mode="line")
plot_ly(eq1,x=~as.Date(Dates),y=~sum_drifting_weights,type="scatter",mode="line")
}
}
ff
get_subportfolio_performance<-function(ff,settings_gui,sel_asset_class='Equities')
{
#sel_asset_class<-"Short-term"
eq<-ff[ff$SubAssetClass == sel_asset_class,]
if(nrow(eq)==0)
{
eq1<-as.data.frame(t(c(NA,NA,NA,NA,NA)),stringsAsFactors=F)
names(eq1)<-c("AssetClass","Dates","pf_idx","sum_drifting_weights","portfolio")
eq1<-head(eq1,0)
}else{
eq<-as.data.table(eq)
eq<-eq%>%group_by(Dates)%>%mutate(sumperf=sum(attribution))
eq<-eq%>%group_by(Dates)%>%mutate(totalloc=sum(abs(TargetWeight)))
eq$levered_perf<-eq$sumperf/eq$totalloc
eq$pf_ret<-ifelse(is.na(eq$adjdates),(eq$levered_perf)/lagpad(eq$levered_perf,k=1)-1,eq$levered_perf-1)
eq$pf_ret<-ifelse(eq$id!=lagpad(eq$id,k=1),eq$pf_ret-trading_fee,eq$pf_ret)
eq$pf_ret<-ifelse(eq$id!=lagpad(eq$id,k=1),0,eq$pf_ret)
eq$pf_ret[1]<-0
eq<-eq%>%group_by(Dates)%>%mutate(sum_drifting_weights=sum(drifting_weights))
eq1<-eq%>%group_by(id)%>%mutate(pf_idx=cumprod(1+pf_ret))
eq1<-eq1[eq1$id==eq1$id[1],]
eq1<-eq1[,c("AssetClass","Dates","pf_idx","sum_drifting_weights")]
eq1$portfolio<-gui$settings_gui[gui$settings_gui$Category=="Portfolio",]$Setting
return(eq1)
plot_ly(eq1,x=~as.Date(Dates),y=~pf_idx,type="scatter",mode="line")
plot_ly(eq1,x=~as.Date(Dates),y=~sum_drifting_weights,type="scatter",mode="line")
}
}
ca<-get_subportfolio_performance(ff,settings_gui,"Cash")
ca
path<-"P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/RStudio/Black_Littermann/ETF_Portfolio_Optimizer/"
path_dash<-"P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Dash/portfolio_simulation_presentation/"
#Get Support Function
source(paste0(path,"Functions/scale_gmp2.R"))
source(paste0(path,"Functions/optimizer_setup2.R"))
source(paste0(path,"Functions/AAM_NAV_CALC2.R"))
#CHF Defensive ESG
#------------------------------------------------------------------------------------------------------------------------------------------------
gmp_as_of_dates<-c("2004-06-01","2008-06-01","2012-06-01","2016-06-01","2020-06-01")
pf_gui_list <- vector(mode = "list", length = length(gmp_as_of_dates))
names(pf_gui_list)<-gmp_as_of_dates
gmp_as_of_date<-gmp_as_of_dates[1]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[2]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[3]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[4]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[5]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
allocation_gui<-prepare_gui_function(pf_gui_list,gmp_as_of_dates)
#Positive Number means long home currency, negative number means short home currency
allocation_gui<-add_fx_hedge(allocation_gui,"CHF","EUR",c(0.5,0.5,0.5,0.5,0.5))
allocation_gui<-add_fx_hedge(allocation_gui,"CHF","USD",c(0,0,0,0,0))
settings_gui<-
as.data.frame(
rbind(
c("ManagementFees",0.008),
c("TradingFees",0.002),
c("RegularRebalancings","quarter"),
c("FirstReb","1999-09-30"),
c("BaseCurrency","CHF"),
c("Portfolio","Amadeus Balanced CHF Max ESG"),
c("RiskCategory","Dynamic"),
c("InvestmentUniverse","Multi Asset"),
c("GeographicExposure","World"),
c("RiskCategoryNumeric",2),
c("Description1","The portfolio follows a dynamic approach and invests between roughly 70% into listed equities and 10% in gold."),
c("Description2","We intend to provide investors with a broad based, very well diversified exposure to the global financial market but with a clear overweight in higher yielding assets."),
c("Description3","The portfolio is rebalanced on a regular basis and follows a mostly static approach to asset allocation, avoiding market timing."),
c("Rebalancings",4),
c("CurrencyHedge","Partly"),
c("HedgeRatio",0.15),
c("DynamicAllocation","No"),
c("RiskAllocationModel","No"),
c("TimeCovered","Jun 1999-Apr 2021"),
c("FiguresNetofFees","Yes"),
c("Benchmark","JPMEGBA LX EQUITY"),
c("Benchmark","MEREGBI LX EQUITY"),
c("Benchmark","CRSPBUI LX EQUITY"),
c("Benchmark","SBCGUSB LX EQUITY"),
c("Benchmark","CARMPAT FP Equity"),
c("Benchmark","FVSTMOR LX EquITY")
),stringsAsFactors=F)
names(settings_gui)<-c("Category","Setting")
sel_sheet=""
#gui<-import_data(sel_sheet=sel_sheet,prices_sheet="Prices")
gui<-import_dataR(prices_sheet="Prices",allocation_gui=allocation_gui,gmp_as_of_dates=gmp_as_of_dates,settings_gui=settings_gui)
gui$settings_gui[gui$settings_gui$Category=='Portfolio',]
#Run Portfolio Simulation
sim_res<-run_simulation(gui)
#Show Results
nav_graph(sim_res$pf[,c("Dates","pf_idx")])
check_whether_exists(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
#Delete old portfolio
delete_selected_portfolio(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
#Save results
save_results_function(save_results="T",overwrite_existing="F",update_prices="F")
sim_res
sim_res
ca
st
st<-get_subportfolio_performance(ff,settings_gui,"Short-term")
st
eq<-get_subportfolio_performance(ff,settings_gui,"Equities")
eq
eq1
eq1
eq<-as.data.table(eq)
eq<-eq%>%group_by(Dates)%>%mutate(sumperf=sum(attribution))
eq<-eq%>%group_by(Dates)%>%mutate(totalloc=sum(abs(TargetWeight)))
eq$levered_perf<-eq$sumperf/eq$totalloc
eq$pf_ret<-ifelse(is.na(eq$adjdates),(eq$levered_perf)/lagpad(eq$levered_perf,k=1)-1,eq$levered_perf-1)
eq<-as.data.table(eq)
eq<-eq%>%group_by(Dates)%>%mutate(sumperf=sum(attribution))
attribution
eq<-ff[ff$SubAssetClass == sel_asset_class,]
sel_asset_class='Equities'
eq<-ff[ff$SubAssetClass == sel_asset_class,]
eq
eq<-as.data.table(eq)
eq<-eq%>%group_by(Dates)%>%mutate(sumperf=sum(attribution))
eq<-eq%>%group_by(Dates)%>%mutate(totalloc=sum(abs(TargetWeight)))
eq
eq$levered_perf<-eq$sumperf/eq$totalloc
eq$pf_ret<-ifelse(is.na(eq$adjdates),(eq$levered_perf)/lagpad(eq$levered_perf,k=1)-1,eq$levered_perf-1)
eq
eq$pf_ret<-ifelse(eq$id!=lagpad(eq$id,k=1),eq$pf_ret-trading_fee,eq$pf_ret)
eq$pf_ret<-ifelse(eq$id!=lagpad(eq$id,k=1),0,eq$pf_ret)
eq$pf_ret[1]<-0
eq<-eq%>%group_by(Dates)%>%mutate(sum_drifting_weights=sum(drifting_weights))
eq1<-eq%>%group_by(id)%>%mutate(pf_idx=cumprod(1+pf_ret))
eq1
eq1<-eq1[eq1$id==eq1$id[1],]
eq1
eq1<-eq1[,c("SubAssetClass","Dates","pf_idx","sum_drifting_weights")]
eq1$portfolio<-gui$settings_gui[gui$settings_gui$Category=="Portfolio",]$Setting
eq1
eq1<-eq1[,c("AssetClass","SubAssetClass","Dates","pf_idx","sum_drifting_weights")]
eq1
eq1<-eq1[,c("AssetClass","SubAssetClass","Dates","pf_idx","sum_drifting_weights")]
#Equities
get_subportfolio_performance<-function(ff,settings_gui,sel_asset_class='Equities')
{
#sel_asset_class<-"Short-term"
eq<-ff[ff$SubAssetClass == sel_asset_class,]
if(nrow(eq)==0)
{
eq1<-as.data.frame(t(c(NA,NA,NA,NA,NA)),stringsAsFactors=F)
names(eq1)<-c("AssetClass","Dates","pf_idx","sum_drifting_weights","portfolio")
eq1<-head(eq1,0)
}else{
eq<-as.data.table(eq)
eq<-eq%>%group_by(Dates)%>%mutate(sumperf=sum(attribution))
eq<-eq%>%group_by(Dates)%>%mutate(totalloc=sum(abs(TargetWeight)))
eq$levered_perf<-eq$sumperf/eq$totalloc
eq$pf_ret<-ifelse(is.na(eq$adjdates),(eq$levered_perf)/lagpad(eq$levered_perf,k=1)-1,eq$levered_perf-1)
eq$pf_ret<-ifelse(eq$id!=lagpad(eq$id,k=1),eq$pf_ret-trading_fee,eq$pf_ret)
eq$pf_ret<-ifelse(eq$id!=lagpad(eq$id,k=1),0,eq$pf_ret)
eq$pf_ret[1]<-0
eq<-eq%>%group_by(Dates)%>%mutate(sum_drifting_weights=sum(drifting_weights))
eq1<-eq%>%group_by(id)%>%mutate(pf_idx=cumprod(1+pf_ret))
eq1<-eq1[eq1$id==eq1$id[1],]
eq1<-eq1[,c("AssetClass","SubAssetClass","Dates","pf_idx","sum_drifting_weights")]
eq1$portfolio<-gui$settings_gui[gui$settings_gui$Category=="Portfolio",]$Setting
return(eq1)
plot_ly(eq1,x=~as.Date(Dates),y=~pf_idx,type="scatter",mode="line")
plot_ly(eq1,x=~as.Date(Dates),y=~sum_drifting_weights,type="scatter",mode="line")
}
}
ca<-get_subportfolio_performance(ff,settings_gui,"Cash")
eq<-get_subportfolio_performance(ff,settings_gui,"Equities")
eq
path<-"P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/RStudio/Black_Littermann/ETF_Portfolio_Optimizer/"
path_dash<-"P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Dash/portfolio_simulation_presentation/"
#Get Support Function
source(paste0(path,"Functions/scale_gmp2.R"))
source(paste0(path,"Functions/optimizer_setup2.R"))
source(paste0(path,"Functions/AAM_NAV_CALC2.R"))
#CHF Defensive ESG
#------------------------------------------------------------------------------------------------------------------------------------------------
gmp_as_of_dates<-c("2004-06-01","2008-06-01","2012-06-01","2016-06-01","2020-06-01")
pf_gui_list <- vector(mode = "list", length = length(gmp_as_of_dates))
names(pf_gui_list)<-gmp_as_of_dates
gmp_as_of_date<-gmp_as_of_dates[1]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[2]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[3]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[4]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[5]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
allocation_gui<-prepare_gui_function(pf_gui_list,gmp_as_of_dates)
#Positive Number means long home currency, negative number means short home currency
allocation_gui<-add_fx_hedge(allocation_gui,"CHF","EUR",c(0.5,0.5,0.5,0.5,0.5))
allocation_gui<-add_fx_hedge(allocation_gui,"CHF","USD",c(0,0,0,0,0))
settings_gui<-
as.data.frame(
rbind(
c("ManagementFees",0.008),
c("TradingFees",0.002),
c("RegularRebalancings","quarter"),
c("FirstReb","1999-09-30"),
c("BaseCurrency","CHF"),
c("Portfolio","Amadeus Balanced CHF Max ESG"),
c("RiskCategory","Dynamic"),
c("InvestmentUniverse","Multi Asset"),
c("GeographicExposure","World"),
c("RiskCategoryNumeric",2),
c("Description1","The portfolio follows a dynamic approach and invests between roughly 70% into listed equities and 10% in gold."),
c("Description2","We intend to provide investors with a broad based, very well diversified exposure to the global financial market but with a clear overweight in higher yielding assets."),
c("Description3","The portfolio is rebalanced on a regular basis and follows a mostly static approach to asset allocation, avoiding market timing."),
c("Rebalancings",4),
c("CurrencyHedge","Partly"),
c("HedgeRatio",0.15),
c("DynamicAllocation","No"),
c("RiskAllocationModel","No"),
c("TimeCovered","Jun 1999-Apr 2021"),
c("FiguresNetofFees","Yes"),
c("Benchmark","JPMEGBA LX EQUITY"),
c("Benchmark","MEREGBI LX EQUITY"),
c("Benchmark","CRSPBUI LX EQUITY"),
c("Benchmark","SBCGUSB LX EQUITY"),
c("Benchmark","CARMPAT FP Equity"),
c("Benchmark","FVSTMOR LX EquITY")
),stringsAsFactors=F)
names(settings_gui)<-c("Category","Setting")
sel_sheet=""
#gui<-import_data(sel_sheet=sel_sheet,prices_sheet="Prices")
gui<-import_dataR(prices_sheet="Prices",allocation_gui=allocation_gui,gmp_as_of_dates=gmp_as_of_dates,settings_gui=settings_gui)
gui$settings_gui[gui$settings_gui$Category=='Portfolio',]
#Run Portfolio Simulation
sim_res<-run_simulation(gui)
sim_res
nav_graph(sim_res$pf[,c("Dates","pf_idx")])
sim_res
check_whether_exists(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
delete_selected_portfolio(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
save_results_function(save_results="T",overwrite_existing="F",update_prices="F")
library(pool)
library(RMySQL)
# pool connection
pool <<- dbPool(
drv = RMySQL::MySQL(),
dbname = "gaa",
#host = "167.99.95.195",
host="172.40.0.17",
username = "root",
#password = "Amad3usCap1tal2018",
password="AmCap2019*",
port=3306
)
options(warn = -1)
pf<-sim_res$pf
sp<-as.data.frame(rbind(
sim_res$ca,
sim_res$st,
sim_res$eq,
sim_res$bo,
sim_res$re,
sim_res$ai,
sim_res$co,
sim_res$sp
),stringsAsFactors=F)
pf_portfolio<-gui$settings_gui[gui$settings_gui$Category=="Portfolio",]$Setting
pf$portfolio<-pf_portfolio
pf
dbWriteTable(pool,"ps_nav",as.data.frame(pf),overwrite=T)
library("textclean")
pf_portfolio<-gui$settings_gui[gui$settings_gui$Category=="Portfolio",]$Setting
pf$portfolio<-pf_portfolio
dbWriteTable(pool,"ps_nav",as.data.frame(pf),append=T)
dbWriteTable(pool,"ps_subportfolios",as.data.frame(sp),append=T,row.names=F)
save_results_function(save_results="T",overwrite_existing="T",update_prices="F")
allocation_gui
path<-"P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/RStudio/Black_Littermann/ETF_Portfolio_Optimizer/"
path_dash<-"P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Dash/portfolio_simulation_presentation/"
#Get Support Function
source(paste0(path,"Functions/scale_gmp2.R"))
source(paste0(path,"Functions/optimizer_setup2.R"))
source(paste0(path,"Functions/AAM_NAV_CALC2.R"))
#CHF Defensive ESG
#------------------------------------------------------------------------------------------------------------------------------------------------
gmp_as_of_dates<-c("2004-06-01","2008-06-01","2012-06-01","2016-06-01","2020-06-01")
pf_gui_list <- vector(mode = "list", length = length(gmp_as_of_dates))
names(pf_gui_list)<-gmp_as_of_dates
gmp_as_of_date<-gmp_as_of_dates[1]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[2]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[3]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[4]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
gmp_as_of_date<-gmp_as_of_dates[5]
source(paste0(path,"All_Portfolios/CHF_Defensive_ESG.R"))
pf_gui_list[[gmp_as_of_date]]<-etfs_db_res
allocation_gui<-prepare_gui_function(pf_gui_list,gmp_as_of_dates)
#Positive Number means long home currency, negative number means short home currency
allocation_gui<-add_fx_hedge(allocation_gui,"CHF","EUR",c(0.5,0.5,0.5,0.5,0.5))
allocation_gui<-add_fx_hedge(allocation_gui,"CHF","USD",c(0,0,0,0,0))
settings_gui<-
as.data.frame(
rbind(
c("ManagementFees",0.008),
c("TradingFees",0.002),
c("RegularRebalancings","quarter"),
c("FirstReb","1999-09-30"),
c("BaseCurrency","CHF"),
c("Portfolio","Amadeus Balanced CHF Max ESG"),
c("RiskCategory","Dynamic"),
c("InvestmentUniverse","Multi Asset"),
c("GeographicExposure","World"),
c("RiskCategoryNumeric",2),
c("Description1","The portfolio follows a dynamic approach and invests between roughly 70% into listed equities and 10% in gold."),
c("Description2","We intend to provide investors with a broad based, very well diversified exposure to the global financial market but with a clear overweight in higher yielding assets."),
c("Description3","The portfolio is rebalanced on a regular basis and follows a mostly static approach to asset allocation, avoiding market timing."),
c("Rebalancings",4),
c("CurrencyHedge","Partly"),
c("HedgeRatio",0.15),
c("DynamicAllocation","No"),
c("RiskAllocationModel","No"),
c("TimeCovered","Jun 1999-Apr 2021"),
c("FiguresNetofFees","Yes"),
c("Benchmark","JPMEGBA LX EQUITY"),
c("Benchmark","MEREGBI LX EQUITY"),
c("Benchmark","CRSPBUI LX EQUITY"),
c("Benchmark","SBCGUSB LX EQUITY"),
c("Benchmark","CARMPAT FP Equity"),
c("Benchmark","FVSTMOR LX EquITY")
),stringsAsFactors=F)
names(settings_gui)<-c("Category","Setting")
sel_sheet=""
#gui<-import_data(sel_sheet=sel_sheet,prices_sheet="Prices")
gui<-import_dataR(prices_sheet="Prices",allocation_gui=allocation_gui,gmp_as_of_dates=gmp_as_of_dates,settings_gui=settings_gui)
gui$settings_gui[gui$settings_gui$Category=='Portfolio',]
#Run Portfolio Simulation
sim_res<-run_simulation(gui)
#Show Results
nav_graph(sim_res$pf[,c("Dates","pf_idx")])
#Check whether a portfolio with this name already exists
check_whether_exists(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
#Delete old portfolio
delete_selected_portfolio(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
#Save results
save_results_function(save_results="T",overwrite_existing="F",update_prices="F")
#CHF Very Dynamic
sel_sheet="CHF_VD"
gui<-import_data(sel_sheet=sel_sheet,prices_sheet="Prices")
gui$settings_gui[gui$settings_gui$Category=='Portfolio',]
sim_res<-run_simulation(gui)
check_whether_exists(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
delete_selected_portfolio(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
save_results_function(save_results="T",overwrite_existing="F",update_prices="F")
source("P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Dash/portfolio_simulation_presentation/AAM_NAV_CALC.R")
sel_sheet="CHF_VD"
gui<-import_data(sel_sheet=sel_sheet,prices_sheet="Prices")
gui$settings_gui[gui$settings_gui$Category=='Portfolio',]
sim_res<-run_simulation(gui)
check_whether_exists(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
delete_selected_portfolio(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
save_results_function(save_results="T",overwrite_existing="F",update_prices="F")
gui
gui$allocation_gui
sim_res<-run_simulation(gui)
sim_res$pf
check_whether_exists(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
sel_sheet="CHF_VDY"
gui<-import_data(sel_sheet=sel_sheet,prices_sheet="Prices")
gui$settings_gui[gui$settings_gui$Category=='Portfolio',]
sim_res<-run_simulation(gui)
check_whether_exists(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
delete_selected_portfolio(gui$settings_gui[gui$settings_gui$Category=='Portfolio',]$Setting)
save_results_function(save_results="T",overwrite_existing="F",update_prices="F")
shiny::runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
rtp12_suba<-alfred[as.character(alfred$realtime_period) %in% head(input$select_vintages_compare,20),]
rtp12_suba<-alfred[as.character(alfred$realtime_period) %in% head(input$select_vintages_compare,20),]
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
rsconnect::configureApp("APPNAME", size="xlarge")
rsconnect::configureApp("shiny_eco", size="small")
rsconnect::configureApp("eco_shiny", size="small")
rsconnect::configureApp("eco_shiny", size="xlarge")
rsconnect::configureApp("eco_shiny", size="xlarge")
unr
rtp12_suba
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
shiny::runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
shiny::runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
shiny::runApp('P:/NEWTREE/Amadeus/CSE_PDE_DHO_FSL/3_FSL/Publications/Economic_Data_Revisions/eco_shiny')
shiny::runApp()
runApp()
today
p<-plot_ly(today,x=~as.Date(date),y=~mnemonic,line = list(color = '#dd0400'),type="scatter",mode="line")%>%
layout(margin=m,title="Most Recent Time Series (Unadjusted)",xaxis = list(title=""), yaxis = list(title="",tickformat =".0"),legend = list(orientation = "h",xanchor = "center",x = 0.5))
p
